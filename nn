import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from keras.layers import Dropout
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import GaussianNoise
from keras.layers import Dense
from keras import optimizers
from keras.wrappers.scikit_learn import KerasRegressor
from keras.callbacks import EarlyStopping
from keras.layers import LSTM
import csv

X_energyDataWithWindow =[]
Y_energyDataWithWindow =[]
#Variables
def convertData(windowSize):
    with open('DataWithNormalTime.csv') as csv_file:
        energyData= []
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            energyData.append(row[1])
        print(len(energyData))
        line_count =0
        for b in energyData:
            if line_count-windowSize>=0:
                y= []
                for x in range(windowSize):
                    y.append(energyData[line_count-x-1])
                X_energyDataWithWindow.append(y)
                Y_energyDataWithWindow.append(energyData[line_count])
            line_count+=1

convertData(10)

#split the data into input and output
x=X_energyDataWithWindow
y=Y_energyDataWithWindow 
y=np.reshape(y, (-1,1))
#Normalization
scaler_x = MinMaxScaler()
scaler_y = MinMaxScaler()
print(scaler_x.fit(x))
xscale=scaler_x.transform(x)
print(scaler_y.fit(y))
yscale=scaler_y.transform(y)


#split the data into train and test
X_train, X_test, y_train, y_test = train_test_split(xscale, yscale, test_size = 0.2, random_state = 0)
n_features = 1
X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)

#Build model
model = Sequential()
model.add(LSTM(10,  activation='tanh', input_shape=(10, 1),return_sequences=True))
#model.add(Dense(10, activation='relu'))
model.add(LSTM(8, activation='tanh'))
model.add(Dropout(0.01))
model.add(Dense(1, activation='linear'))
model.summary()
opt = optimizers.Adam(learning_rate=0.01)
model.compile(loss='mean_squared_error', optimizer=opt)

es = EarlyStopping(monitor='val_loss',patience=2)
history = model.fit(X_train, y_train, epochs=25,validation_data=(X_test, y_test), batch_size=32,callbacks=[es])

#plot graphs regarding the results
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend()
plt.show()
plt.savefig('trainingvstestaccuracy.png')
'''